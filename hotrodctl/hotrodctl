#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STARTTIME=$(date +%s)
cd $DIR

usage() {
    echo "Usage:"
    echo "hotrodctl start"
    echo "hotrodctl stop"
    echo "hotrodctl restart SERVICENAME"
    echo "hotrodctl enter SERVICENAME"
    exit 1
}

COMMAND=$1

[ $# -gt 0 ] || usage

shift 1

declare -a RUNLEVELS=("core" "0" "1" "2")

[ -n "$HOTROD_DEBUG" ] && {
  set -x
}

supervise() {
  CANDIDATES=$(docker ps -a --format '{{.Names}}' --filter name=weaveproxy --filter status=exited -q)
  [ -n "$CANDIDATES" ] && {
    CANDIDATES=$(docker ps -a --format '{{.Names}}' --filter name=wproxy --filter status=exited -q)
    [ -n "$CANDIDATES" ] && {
      echo "Start weave..."
      docker start $CANDIDATES
    }
  }
  
  while true; do
    
    for runlevel in ${RUNLEVELS[@]}; do
      CANDIDATES=$(docker -H=unix:///var/run/weave/weave.sock ps -a -q --format '{{.Names}}' --filter status=exited --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter label=za.co.panoptix.hotrod.startorder=$runlevel)
      [ -n "$CANDIDATES" ] &&  {
        echo "Start hotrod containers runlevel $runlevel..."
        docker -H=unix:///var/run/weave/weave.sock start $CANDIDATES 
      }
    done
    sleep 30
    
  done
}

stopall() {
  CANDIDATES=$(docker ps -q --filter status=running --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter name=_hotrodctl_)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Stop hotrodctl...'
    timeout 10 docker stop --time=5 $CANDIDATES 
    docker stop --time=5 $CANDIDATES
  }
  CANDIDATES=$(docker ps -q --filter status=running --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Stop hotrod containers...'
    docker stop --time=45 $CANDIDATES 
  }
}

svcrestart() {
  CONTAINER=$1
  CANDIDATES=$(docker ps -q --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname=$HOTROD_PROJNAME --filter name=$CONTAINER)
  [ -n "$CANDIDATES" ] &&  {
    echo 'Restart container...'
    docker restart $CANDIDATES 
  }
}


#Setup hotrodctl
[ -n "$HOTROD_PROJNAME" ] && {
  cp /usr/bin/hotrodctl /usr/local/bin/hotrodctl
}

case "$COMMAND" in
    supervise) 
        supervise
        ;;
    svcstop)
        stopall
        ;;
    svcrestart)
        svcrestart $1
        ;;
    stop)
        CANDIDATES=$(docker images | grep hotrodctl | grep -v hotrodctlkeys | head -1 | awk '{ print $1; }')
        [ -n "$CANDIDATES" ] && {
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -e DOCKER_HOST=unix:///var/run/docker.sock $CANDIDATES svcstop
        }
        ;;
    start)
        echo 'Start hotrodctl...'
        docker start $(docker ps -a -q --format '{{.Names}}' --filter label=za.co.panoptix.hotrod.projectname --filter name=_hotrodctl_)
        ;;   
    restart)
        CANDIDATES=$(docker images | grep hotrodctl | grep -v hotrodctlkeys | head -1 | awk '{ print $1; }')
        [ -n "$CANDIDATES" ] && {
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:rw -v /var/run/weave/weave.sock:/var/run/weave/weave.sock:rw -e DOCKER_HOST=unix:///var/run/weave/weave.sock $CANDIDATES svcrestart $1
        }
        ;;
    enter)
        CONTAINER=$1
        COMMAND=$2
        [ -n "$COMMAND" ] || {
           export INTERACTIVE="-it"
           export COMMAND="bash"
        }
        CANDIDATES=$(docker ps --format '{{.Names}}' --filter status=running --filter label=za.co.panoptix.hotrod.projectname --filter name=$CONTAINER)
        [ -n "$CANDIDATES" ] &&  {
          docker exec $INTERACTIVE $(echo $CANDIDATES | cut -f1 -d' ') "$COMMAND"
        }
        ;;     
    *)
        echo "Unknown hotrodctl command '$COMMAND'" >&2
        usage
        ;;
esac   
