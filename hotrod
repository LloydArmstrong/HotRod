#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STARTTIME=$(date +%s)
cd $DIR

declare -a TOOLS=("docker" "docker-machine" "docker-compose" "mini.py" "slappasswd")

#Inspired by and bits copied from https://github.com/zettio/weave

usage() {
    echo "Usage:"
    echo "hotrod init"
    echo "hotrod build"
    echo "hotrod env"
#     echo "hotrod update"
    exit 1
}

COMMAND=$1

[ $# -gt 0 ] || usage

shift 1

CONFIGFILE=$DIR/default.yml
CONFIGTEMPLATE=$DIR/docs/default.yml

export FWDPORT=8999
export USER=$(whoami)
export HOTROD_HOST_USER=root
export HOTROD_HOST_SUDO=yes
export HOTROD_HOSTNAME=$HOTROD_HOSTNAME
export WEAVE_SECRET=$(openssl rand -hex 32)
export HOTROD_AUTH_SECRET=$(openssl rand -hex 32)
export HOTROD_ADMIN_AUTH_SECRET=$(openssl rand -hex 32)
export LDAP_MANAGER_PASSWORD=$(openssl rand -hex 12)
export DEFAULT_USER_FIRSTNAME=Default
export DEFAULT_USER_LASTNAME=User
export DEFAULT_USER=default
[ -n "$HOTROD_PROJECTFS" ]  || export HOTROD_PROJECTFS=https://github.com/panoptix-za/hotrod-projectfs.git
[ -n "$HOTROD_ADMIN_SETTINGS" ]  || export HOTROD_ADMIN_SETTINGS=https://github.com/panoptix-za/hotrod-admin-settings.git
[ -n "$THIS_MACHINE" ] || export THIS_MACHINE=""

# utility function to check whether a command can be executed by the shell
# see http://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script
command_exists () {
    command -v $1 >/dev/null 2>&1
}

# Technique from https://github.com/rroemhild/docker-ejabberd/blob/master/run
readonly PYTHON_JINJA2="import os;
import sys;
import jinja2;
sys.stdout.write(
    jinja2.Template
        (sys.stdin.read()
    ).render(env=os.environ))"


make_config() {
    echo "Generating config file..."
    cat ${CONFIGTEMPLATE} \
      | python -c "${PYTHON_JINJA2}" \
      > ${CONFIGFILE}
}

end_time() {
  ENDTIME=$(date +%s)
  echo "$(($ENDTIME - $STARTTIME)) seconds elapsed..."
  cd $DIR
}

trim() {
    echo $*
}

prompts_default_yml() {
  clear
  echo "Welcome to the HotRod initialisation script"
  echo ""
  
  [ -n "$NOPROMPT" ] || {
  
  export HOTROD_PROJNAME=Hotrod
  
  while true; do
    read -p "Please specify your HotRod project name [$HOTROD_PROJNAME]:" hotrodproj
    [ -z $hotrodproj ] || HOTROD_PROJNAME=$hotrodproj
    [  -n "$HOTROD_PROJNAME" ] && break 
  done
  
  if [[ "$THIS_MACHINE" == "" ]]; then
    find_machine
  fi 
  if [[ "$THIS_MACHINE" != "" ]]; then
    export HOTROD_HOSTNAME=$(docker-machine ip $THIS_MACHINE)
  fi
    
  while true; do
    read -p "Please specify your HotRod server hostname [$HOTROD_HOSTNAME]:" hotrodurl
    [ -z $hotrodurl ] || HOTROD_HOSTNAME=$hotrodurl
    [  -n "$HOTROD_HOSTNAME" ] && break 
  done
  
  while true; do
     [ -n "$WEAVE_SECRET" ] && break
     read -p "Please specify a Weave Secret:" WEAVE_SECRET
  done
  while true; do
     [ -n "$HOTROD_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod Auth Secret:" HOTROD_AUTH_SECRET
  done
  while true; do
     [ -n "$HOTROD_ADMIN_AUTH_SECRET" ] && break
     read -p "Please specify a HotRod-Admin Auth Secret:" HOTROD_ADMIN_AUTH_SECRET
  done 
  while true; do
     [ -n "$LDAP_MANAGER_PASSWORD" ] && break
     read -p "Please specify a LDAP Manager Password:" LDAP_MANAGER_PASSWORD
  done 
  
  while true; do
    echo "Please provide a password for the default admin account."
    adminpasswd=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || ADMIN_PASSWD=$adminpasswd
    [  -n "$ADMIN_PASSWD" ] && break 
  done  
  
  DEFAULT_USER='default'
  DEFAULT_USER_FIRSTNAME='Default'  
  DEFAULT_USER_LASTNAME='User'    
  
  
  while true; do
    read -p "Please specify your HotRod default username [$DEFAULT_USER]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER=$defaultuser
    [  -n "$DEFAULT_USER" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user firstname [$DEFAULT_USER_FIRSTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    read -p "Please specify your HotRod default user lastname [$DEFAULT_USER_LASTNAME]:" defaultuser
    [ -z $defaultuser ] || DEFAULT_USER_FIRSTNAME=$defaultuser
    [  -n "$DEFAULT_USER_FIRSTNAME" ] && break 
  done  
  while true; do
    echo "Please provide a password for the default user account."
    password=$(slappasswd -h {SSHA} | base64)
    [ -z $adminpasswd ] || DEFAULT_USER_PASSWD=$password
    [  -n "$DEFAULT_USER_PASSWD" ] && break 
  done  
 
  export ADMIN_PASSWD
  export DEFAULT_USER
  export DEFAULT_USER_FIRSTNAME
  export DEFAULT_USER_LASTNAME  
  export DEFAULT_USER_PASSWD
  
  }
  
}  
  
create_default_yml() {
  [ -n "$USEEXISTING" ] || {
    [[ -n "$HOTROD_PROJNAME" && -n "$HOTROD_HOSTNAME" && -n "$ADMIN_PASSWD" && -n "$DEFAULT_USER_PASSWD" ]] || {
      echo "HOTROD_PROJNAME, HOTROD_HOSTNAME, ADMIN_PASSWD or DEFAULT_USER_PASSWD was not set, exiting..."
      exit 1
    }
    [ -f $DIR/default.yml ] && mv $DIR/default.yml $DIR/default.yml.prev    
    make_config
  }  
}

doenvinit() {
  [ -n "$USEEXISTING" ] || {
    [ -f $DIR/default.yml ] && mv $DIR/default.yml $DIR/default.yml.prev
    make_config
  }
}

TEMPLATES=""
RUNFILES=""

recurse() {
#  for i in "$1"/*;do
#     if [ -f "$i" ]; then
#         if [[ "$i" == *dc-* && "$i" == *.yml.run ]]; then
#            RUNFILES="$RUNFILES $i"
#         fi 
#         if [[ "$i" == *dc-* && "$i" == *.yml ]]; then           
#            TEMPLATES="$TEMPLATES $i"
#         fi
#     elif [ -d "$i" ];then
#         recurse "$i"
#     fi
#  done
  TEMPLATES="docker-compose.yml"
}

find_project() {
  COMPOSE_FLAGS=$1
  if [[ "$HOTROD_PROJNAME" == "" ]]; then
    export HOTROD_PROJNAME=$(trim $(cat $DIR/default.yml | grep hotrod_project_name | cut -f2 -d':'))
    echo "# Project Found (default.yml): $HOTROD_PROJNAME"
  fi 
}

compose_up() {
  COMPOSE_FLAGS=$1
  if [[ "$HOTROD_PROJNAME" == "" ]]; then
    export HOTROD_PROJNAME=$(trim $(cat $DIR/default.yml | grep hotrod_project_name | cut -f2 -d':'))
    echo "Project Found (default.yml): $HOTROD_PROJNAME"
  fi 
  
  if [[ "$THIS_MACHINE" == "" ]]; then
    find_machine  
    eval $(docker-machine env $THIS_MACHINE)
    set +e
  fi 
  if [[ "$THIS_MACHINE" != "" ]]; then
    echo "Using: $THIS_MACHINE (for project: $HOTROD_PROJNAME)"  
  else
    echo "No machine found for project: $HOTROD_PROJNAME"
    echo "Perhaps run a helper script in bin/"
    echo ""
    exit 1
  fi

  cd $DIR
  
  mini.py
  
  recurse .
  
  [ -n "$NOPROMPT" ] || {
    if [[ ! "$RUNFILES" == "" ]]; then
      read -p 'Old .run files detected, do you wish do clear and recreate ALL containers? YES/NO: ' answer
      case "${answer}" in
          [yY]|[yY][eE][sS])
              for i in $RUNFILES; do
                rm $i
              done            
              ;;
          *)
            echo "Skipping 'run once' compose files..."      
            ;;
      esac                        
    fi
  }
  
  for i in $TEMPLATES; do
    # Add 'once' to the docker-compose (dc-*.yml) file to only run once
    if [[ "$i" != *-once* || ! -f ${i}.run ]]; then
      [ -n "$ALWAYSPULL" ] && {
        docker-compose -f $i pull
      }
      echo ">> docker-compose -f $i build"
      docker-compose -f $i build
      echo ">> docker-compose -f $i up $COMPOSE_FLAGS -d"      
      docker-compose -f $i up $COMPOSE_FLAGS -d
      touch ${i}.run
    fi
  done
  
  end_time
}

doinit() {

  for cmd in "${TOOLS[@]}"
  do 
    echo "Checking for dependencies... ($cmd)"
    command_exists $cmd
    echo "$cmd (present)"  
  done
  
  [ -n "$NOPROMPT" ] || {
  if [ -f $DIR/default.yml ]; then
    read -p 'Prompt for new settings (will overwrite previous choices)? YES/NO: ' answer
    case "${answer}" in
        [yY]|[yY][eE][sS])
            prompts_default_yml            
            ;;
        *)
          echo "Continue with existing default.yml..."      
          export USEEXISTING=True
          ;;
    esac                        
   else
     prompts_default_yml
  fi 
  }
  
  create_default_yml
  
  if [ ! -n "$NOPROMPT" ]; then
  
   read -p 'Build the system? YES/NO: ' answer
   case "${answer}" in
       [yY]|[yY][eE][sS])
           dobuild            
           ;;
       *)
         echo "Build aborted..."      
         exit 1
         ;;
   esac  
  
  else
    dobuild
  fi
  
}

find_machine() {
  echo "# Trying to determine machine name..."
#   set -x
  DOCKER_MACHINES=$(docker-machine ls --filter 'state=Running' -q)
  HOTROD_MACHINES=""
  
  for i in $DOCKER_MACHINES; do
     LABELS=$(docker-machine inspect $i --format="{{ range .HostOptions.EngineOptions.Labels }}{{ . }} {{ end }}" 2>&1 | tr ' ' "\n")
     if [[ "$LABELS" == *"Hotrod=True"* ]]; then
       for l in $LABELS; do
#           echo $l
          if [[ "$l" == *"HotrodProj"* && "$l" == *"=$HOTROD_PROJNAME" ]]; then
            THIS_MACHINE=$(trim $i)
          fi
        done
     fi
  done
  set +x
}

doenv() {
  find_project
  find_machine
  [[ "$THIS_MACHINE" == "" ]] && {
    echo "# Docker-Machine host not found, using cached .hotrodenv file"
    [ -f $DIR/.hotrodenv ] && {
      cat $DIR/.hotrodenv    
      echo "export DOCKER_CERT_PATH=\"$DIR/hotrodctlkeys\""
    }
    exit 0
  }  
  echo "# This machine: $THIS_MACHINE"
  THIS_ENV=$(docker-machine env $THIS_MACHINE)
  echo "$THIS_ENV" | sed -e 's/:2376/:12345/g' | sed -E "s;PATH=.+;PATH=\"$DIR\/hotrodctlkeys\";g" | sed -e "s/docker-machine env $THIS_MACHINE/\.\/hotrod env/g"
  echo "$THIS_ENV" | grep -v "^#" | grep -v "CERT_PATH=" > $DIR/.hotrodenv
  exit 0
}


weave_proxy() {
  docker-compose -f core-hotrod.yml up -d wproxy
}

dobuild() {
  mini.py 
  
  if [[ "$HOTROD_PROJNAME" == "" ]]; then
    export HOTROD_PROJNAME=$(trim $(cat $DIR/default.yml | grep hotrod_project_name | cut -f2 -d':'))
    echo "Existing Project Found: $HOTROD_PROJNAME"
  fi 
  if [[ "$THIS_MACHINE" == "" ]]; then
    find_machine  
  fi 
  if [[ "$THIS_MACHINE" != "" ]]; then
    echo "Using: $THIS_MACHINE (for project: $HOTROD_PROJNAME)"  
  else
    echo "No machine found for project: $HOTROD_PROJNAME"
    echo "Perhaps run a helper script in bin/"
    echo ""
    exit 1
  fi
  eval $(docker-machine env $THIS_MACHINE)
  set +e
  weave_proxy
  set -e
  dohotrodctl
  eval $(docker-machine env $THIS_MACHINE)
  DOCKER_HOST="$(echo $DOCKER_HOST  | sed 's/:2376/:12345/')"
  echo "DOCKER_HOST: $DOCKER_HOST"
  compose_up
}

dohotrodctl() {
  cd $DIR

  mini.py

  if [[ "$HOTROD_PROJNAME" == "" ]]; then
    export HOTROD_PROJNAME=$(trim $(cat $DIR/default.yml | grep hotrod_project_name | cut -f2 -d':'))
    echo "Existing Project Found: $HOTROD_PROJNAME"
  fi 
  if [[ "$THIS_MACHINE" == "" ]]; then
    find_machine  
  fi 
  if [[ "$THIS_MACHINE" != "" ]]; then
    echo "Using: $THIS_MACHINE (for project: $HOTROD_PROJNAME)"  
  else
    echo "No machine found for project: $HOTROD_PROJNAME"
    echo "Perhaps run a helper script in bin/"
    echo ""
    exit 1
  fi
  echo "Creating hotrodctl container..."
  eval $(docker-machine env $THIS_MACHINE) 
  mkdir -p $DIR/hotrodctl/keys
  cp $DOCKER_CERT_PATH/{cert,key,ca}.pem $DIR/hotrodctlkeys/
  
  docker-compose -f core-hotrod.yml build hotrodctlkeys
  docker-compose -f core-hotrod.yml up -d hotrodctlkeys
  
  docker-compose -f core-hotrod.yml build hotrodctl
  docker-compose -f core-hotrod.yml up -d hotrodctl
}

case "$COMMAND" in
    init)
        doinit 
        ;;
    build)
        dobuild
        ;;
    hotrodctl)
        dohotrodctl
        ;;
    env)
        doenv
        ;;
    update)
        export NOPROMPT=1
        compose_up 
        ;;
    *)
        echo "Unknown hotrod command '$COMMAND'" >&2
        usage
        ;;
esac        

